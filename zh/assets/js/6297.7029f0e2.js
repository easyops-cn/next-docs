"use strict";(self.webpackChunknext_docs=self.webpackChunknext_docs||[]).push([[6297],{26297:(e,t,n)=>{n.r(t),n.d(t,{default:()=>f});var o=n(67294),s=n(54184),r=n(33788),i=n(86010);const a={comments:{lineComment:"#"},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],folding:{offSide:!0},onEnterRules:[{beforeText:/:\s*$/,action:{indentAction:s.languages.IndentAction.Indent}}]},c={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],onEnterRules:[{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,afterText:/^\s*\*\/$/,action:{indentAction:s.languages.IndentAction.IndentOutdent,appendText:" * "}},{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,action:{indentAction:s.languages.IndentAction.None,appendText:" * "}},{beforeText:/^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,action:{indentAction:s.languages.IndentAction.None,appendText:"* "}},{beforeText:/^(\t|(\ \ ))*\ \*\/\s*$/,action:{indentAction:s.languages.IndentAction.None,removeText:1}}],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],folding:{markers:{start:new RegExp("^\\s*//\\s*#?region\\b"),end:new RegExp("^\\s*//\\s*#?endregion\\b")}}},l={defaultToken:"invalid",tokenPostfix:".ts",keywords:["abstract","any","as","asserts","bigint","boolean","break","case","catch","class","continue","const","constructor","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","null","number","object","out","package","private","protected","public","override","readonly","require","global","return","satisfies","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","unique","unknown","var","void","while","with","yield","async","await","of"],controlKeywords:["break","continue","return","if","else","switch","case","default","do","for","while","try","throw","catch","finally","as","import","export","from","await","yield","with","package"],operators:["<=",">=","==","!=","===","!==","=>","+","-","**","*","/","%","++","--","<<","</",">>",">>>","&","|","^","!","~","&&","||","??","?",":","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=","@"],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,regexpctl:/[(){}\[\]\$\^|\-*+?\.]/,regexpesc:/\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,tokenizer:{root:[[/[{}]/,"delimiter.bracket"],{include:"common"}],common:[[/[a-z_$][\w$]*/,{cases:{"@controlKeywords":"keyword.flow","@keywords":"keyword","@default":"identifier"}}],[/[A-Z][\w\$]*/,"type.identifier"],{include:"@whitespace"},[/\/(?=([^\\\/]|\\.)+\/([dgimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/,{token:"regexp",bracket:"@open",next:"@regexp"}],[/[()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/!(?=([^=]|$))/,"delimiter"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/,"number.float"],[/0[xX](@hexdigits)n?/,"number.hex"],[/0[oO]?(@octaldigits)n?/,"number.octal"],[/0[bB](@binarydigits)n?/,"number.binary"],[/(@digits)n?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_double"],[/'/,"string","@string_single"],[/`/,"string","@string_backtick"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@jsdoc"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],jsdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],regexp:[[/(\{)(\d+(?:,\d*)?)(\})/,["regexp.escape.control","regexp.escape.control","regexp.escape.control"]],[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,["regexp.escape.control",{token:"regexp.escape.control",next:"@regexrange"}]],[/(\()(\?:|\?=|\?!)/,["regexp.escape.control","regexp.escape.control"]],[/[()]/,"regexp.escape.control"],[/@regexpctl/,"regexp.escape.control"],[/[^\\\/]/,"regexp"],[/@regexpesc/,"regexp.escape"],[/\\\./,"regexp.invalid"],[/(\/)([dgimsuy]*)/,[{token:"regexp",bracket:"@close",next:"@pop"},"keyword.other"]]],regexrange:[[/-/,"regexp.escape.control"],[/\^/,"regexp.invalid"],[/@regexpesc/,"regexp.escape"],[/[^\]]/,"regexp"],[/\]/,{token:"regexp.escape.control",next:"@pop",bracket:"@close"}]],string_double:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_single:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]],string_backtick:[[/\$\{/,{token:"delimiter.bracket",next:"@bracketCounting"}],[/[^\\`$]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/`/,"string","@pop"]],bracketCounting:[[/\{/,"delimiter.bracket","@bracketCounting"],[/\}/,"delimiter.bracket","@pop"],{include:"common"}]}},d=c,u={defaultToken:"invalid",tokenPostfix:".js",keywords:["break","case","catch","class","continue","const","constructor","debugger","default","delete","do","else","export","extends","false","finally","for","from","function","get","if","import","in","instanceof","let","new","null","return","set","super","switch","symbol","this","throw","true","try","typeof","undefined","var","void","while","with","yield","async","await","of"],typeKeywords:[],controlKeywords:l.controlKeywords.filter((e=>"as"!==e)),operators:l.operators,symbols:l.symbols,escapes:l.escapes,digits:l.digits,octaldigits:l.octaldigits,binarydigits:l.binarydigits,hexdigits:l.hexdigits,regexpctl:l.regexpctl,regexpesc:l.regexpesc,tokenizer:l.tokenizer};s.languages.register({id:"yaml",extensions:[".yaml",".yml"],aliases:["YAML","yaml","YML","yml"],mimetypes:["application/x-yaml","text/x-yaml"]}),s.languages.setLanguageConfiguration("yaml",a),s.languages.setMonarchTokensProvider("yaml",{tokenPostfix:".yaml.next",brackets:[{token:"delimiter.bracket",open:"{",close:"}"},{token:"delimiter.square",open:"[",close:"]"}],keywords:["true","True","TRUE","false","False","FALSE","null","Null","Null","~"],numberInteger:/(?:0|[+-]?[0-9]+)/,numberFloat:/(?:0|[+-]?[0-9]+)(?:\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,numberOctal:/0o[0-7]+/,numberHex:/0x[0-9a-fA-F]+/,numberInfinity:/[+-]?\.(?:inf|Inf|INF)/,numberNaN:/\.(?:nan|Nan|NAN)/,numberDate:/\d{4}-\d\d-\d\d([Tt ]\d\d:\d\d:\d\d(\.\d+)?(( ?[+-]\d\d?(:\d\d)?)|Z)?)?/,escapes:/\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,tokenizer:{root:[{include:"@whitespace"},{include:"@comment"},[/%[^ ]+.*$/,"meta.directive"],[/---/,"operators.directivesEnd"],[/\.{3}/,"operators.documentEnd"],[/[-?:](?= )/,"operators"],{include:"@anchor"},{include:"@tagHandle"},{include:"@flowCollections"},{include:"@blockStyle"},[/@numberInteger(?![ \t]*\S+)/,"number"],[/@numberFloat(?![ \t]*\S+)/,"number.float"],[/@numberOctal(?![ \t]*\S+)/,"number.octal"],[/@numberHex(?![ \t]*\S+)/,"number.hex"],[/@numberInfinity(?![ \t]*\S+)/,"number.infinity"],[/@numberNaN(?![ \t]*\S+)/,"number.nan"],[/@numberDate(?![ \t]*\S+)/,"number.date"],[/(".*?"|'.*?'|[^#'"]*?)([ \t]*)(:)( |$)/,["tag","white","operators","white"]],{include:"@flowScalars"},{include:"@flowExpression"},[/.+?(?=(\s+#|$))/,{cases:{"@keywords":"keyword","@default":"string"}}]],object:[{include:"@whitespace"},{include:"@comment"},[/\}/,"@brackets","@pop"],[/,/,"delimiter.comma"],[/:(?= )/,"operators"],[/(?:".*?"|'.*?'|[^,\{\[]+?)(?=: )/,"tag"],{include:"@flowCollections"},{include:"@flowScalars"},{include:"@tagHandle"},{include:"@anchor"},{include:"@flowNumber"},[/[^\},]+/,{cases:{"@keywords":"keyword","@default":"string"}}]],array:[{include:"@whitespace"},{include:"@comment"},[/\]/,"@brackets","@pop"],[/,/,"delimiter.comma"],{include:"@flowCollections"},{include:"@flowScalars"},{include:"@tagHandle"},{include:"@anchor"},{include:"@flowNumber"},[/[^\],]+/,{cases:{"@keywords":"keyword","@default":"string"}}]],multiString:[[/^( +)(<%[~=]?(?:\s|$))/,["string",{token:"@rematch",next:"@multiExpression.$1"}]],[/^( +).+$/,"string","@multiStringContinued.$1"]],multiStringContinued:[[/^( *)(.+)$/,{cases:{"$1==$S2":"string","@default":{token:"@rematch",next:"@popall"}}}]],whitespace:[[/[ \t\r\n]+/,"white"]],comment:[[/#.*$/,"comment"]],flowCollections:[[/\[/,"@brackets","@array"],[/\{/,"@brackets","@object"]],flowScalars:[[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/'/,"string","@singleQuotedString"],[/"/,"string","@doubleQuotedString"]],singleQuotedString:[{include:"@expressionStart"},[/(%>)(\s*)(')/,[{token:"delimiter",bracket:"@close"},"white",{token:"string",next:"@pop"}]],[/[^']*'/,"string","@pop"]],doubleQuotedString:[{include:"@expressionStart"},[/(%>)(\s*)(")/,[{token:"delimiter",bracket:"@close"},"white",{token:"string",next:"@pop"}]],[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],blockStyle:[[/[>|][0-9]*[+-]?$/,"operators","@multiString"]],flowNumber:[[/@numberInteger(?=[ \t]*[,\]\}])/,"number"],[/@numberFloat(?=[ \t]*[,\]\}])/,"number.float"],[/@numberOctal(?=[ \t]*[,\]\}])/,"number.octal"],[/@numberHex(?=[ \t]*[,\]\}])/,"number.hex"],[/@numberInfinity(?=[ \t]*[,\]\}])/,"number.infinity"],[/@numberNaN(?=[ \t]*[,\]\}])/,"number.nan"],[/@numberDate(?=[ \t]*[,\]\}])/,"number.date"]],tagHandle:[[/\![^ ]*/,"tag"]],anchor:[[/[&*][^ ]+/,"namespace"]],flowExpression:[{include:"@expressionStart"},[/(\s+)(%>)(\s*)/,["white",{token:"delimiter",bracket:"@close"},{token:"white",next:"@pop"}]]],expressionStart:[[/(\s*)(<%[~=]?)(\s+)/,["white",{token:"delimiter",bracket:"@open"},{token:"white",next:"@expressionEmbedded",nextEmbedded:"text/javascript"}]]],multiExpression:[[/(<%[~=]?)/,{token:"white",next:"@expressionEmbedded",nextEmbedded:"text/javascript"}],[/(%>)(\s*)/,[{token:"delimiter",bracket:"@close"},{token:"white",next:"@pop"}]],[/^( *).+$/,{cases:{"$1==$S2":"string","@default":{token:"@rematch",next:"@popall"}}}]],expressionEmbedded:[[/%>/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}]]}}),s.languages.register({id:"javascript",extensions:[".js",".es6",".jsx",".mjs",".cjs"],firstLine:"^#!.*\\bnode",filenames:["jakefile"],aliases:["JavaScript","javascript","js"],mimetypes:["text/javascript"]}),s.languages.setLanguageConfiguration("javascript",d),s.languages.setMonarchTokensProvider("javascript",u),s.languages.register({id:"typescript",extensions:[".ts",".tsx",".cts",".mts"],aliases:["TypeScript","ts","typescript"],mimetypes:["text/typescript"]}),s.languages.setLanguageConfiguration("typescript",c),s.languages.setMonarchTokensProvider("typescript",l);const p={slidesActive:"slidesActive_vr0r",cursor:"cursor_RM2z"};var m=function(e){return e[e.None=0]="None",e[e.Active=1]="Active",e[e.Finished=2]="Finished",e}(m||{});let g=0;s.languages.typescript.javascriptDefaults.setCompilerOptions({allowNonTsExtensions:!0,lib:[]}),s.languages.typescript.typescriptDefaults.setCompilerOptions({allowNonTsExtensions:!0,lib:[]});const f=(0,o.forwardRef)((function(e,t){let{files:n,currentFile:a,className:c,theme:l,typingEffectReady:d,onChange:u}=e;const f=(0,o.useRef)(),y=(0,o.useRef)(),k=(0,o.useMemo)((()=>new Map),[]),w=(0,o.useMemo)((()=>`${"workspace/"}${++g}`),[]),[h,v]=(0,o.useState)(m.None),S=(0,o.useMemo)((()=>{let e=k.get(a);if(!e){const t=n.find((e=>e.name===a));e=s.editor.createModel(t.codeSlides?.[0]??t.code,t.lang??"yaml",s.Uri.file(`${w}/${t.name}`)),k.set(a,e)}return e}),[a,k,n,w]);return(0,o.useEffect)((()=>{l&&s.editor.setTheme(l)}),[l]),(0,o.useEffect)((()=>{y.current?y.current.setModel(S):(y.current=s.editor.create(f.current,{model:S,minimap:{enabled:!1},scrollBeyondLastLine:!1,tabSize:2,insertSpaces:!0,automaticLayout:!0,fontSize:13,lineHeight:r.CZ,scrollbar:{horizontalScrollbarSize:r.sE,verticalScrollbarSize:r.sE,horizontalSliderSize:8,verticalSliderSize:8,alwaysConsumeMouseWheel:!1},padding:{top:r.z5},overviewRulerBorder:!1,mouseWheelScrollSensitivity:.5,renderLineHighlight:"none"}),y.current.onKeyDown((e=>{if(e.equals(s.KeyMod.CtrlCmd|s.KeyCode.KeyK)){const t=new KeyboardEvent("keydown",{ctrlKey:e.ctrlKey,metaKey:e.metaKey,key:"k"});document.dispatchEvent(t)}})))}),[S]),(0,o.useImperativeHandle)(t,(()=>({resetScrollTop:()=>y.current.setScrollTop(0,s.editor.ScrollType.Immediate)})),[]),(0,o.useEffect)((()=>{const e=S.onDidChangeContent((()=>{u?.(S.getValue(),a)}));return()=>{e.dispose()}}),[a,S,u]),(0,o.useEffect)((()=>{const e=n.find((e=>e.name===a));if(e.codeSlides&&d){y.current.focus(),v(m.Active);const t=y.current.createDecorationsCollection();(async function(e,t,n){return new Promise((o=>{const r=function(e){return x(e.slice(1).map((e=>x(e.split(""),20))),1e3)}(e);let i=0;const a=function(){const e=r[i],{lineNumber:n,column:l}=b(t),d=new s.Range(n,l,n,l);t.applyEdits([{range:d,text:e}]),c();const u=r[++i];u?(i++,setTimeout(a,u)):setTimeout(o,1e3)},c=function(){const{lineNumber:e,column:o}=b(t);n.set([{range:{startLineNumber:e,startColumn:o,endLineNumber:e,endColumn:o},options:{afterContentClassName:p.cursor}}])};c(),setTimeout(a,2e3)}))})(e.codeSlides,S,t).then((()=>{t.set([]),y.current.setPosition(b(S)),v(m.Finished)}))}}),[a,S,n,d]),(0,o.useEffect)((()=>{switch(h){case m.Active:y.current.updateOptions({readOnly:!0,domReadOnly:!0});break;case m.Finished:y.current.updateOptions({readOnly:!1,domReadOnly:!1})}}),[h]),(0,o.useEffect)((()=>()=>{y.current.dispose();for(const e of k.values())e.dispose()}),[]),o.createElement("div",{ref:f,className:(0,i.Z)(c,{[p.slidesActive]:h===m.Active})})}));function b(e){const t=e.getLineCount();return{lineNumber:t,column:e.getLineLength(t)+1}}function x(e){const t=[];let n=0;for(var o=arguments.length,s=new Array(o>1?o-1:0),r=1;r<o;r++)s[r-1]=arguments[r];for(;n<e.length;){const o=[].concat(e[n]).flat(1/0);t.push(...o),n++,n<e.length&&o.length>0&&t.push(...s)}return t}}}]);